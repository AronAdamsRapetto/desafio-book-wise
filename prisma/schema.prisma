generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  image         String?   @map("avatar_url")
  created_at    DateTime  @default(now())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  ratings       Rating[]
  sessions      Session[]

  @@map("users")
}

model Book {
  id          String              @id @default(uuid())
  name        String
  author      String
  summary     String
  cover_url   String
  total_pages Int
  created_at  DateTime            @default(now())
  categories  CategoriesOnBooks[]
  ratings     Rating[]

  @@map("books")
}

model Category {
  id    String              @id @default(uuid())
  name  String              @unique
  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  book_id     String
  category_id String
  category    Category @relation(fields: [category_id], references: [id])
  book        Book     @relation(fields: [book_id], references: [id])

  @@id([book_id, category_id])
}

model Rating {
  id          String   @id @default(uuid())
  rate        Int
  description String
  created_at  DateTime @default(now())
  book_id     String
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  book        Book     @relation(fields: [book_id], references: [id])

  @@map("ratings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
